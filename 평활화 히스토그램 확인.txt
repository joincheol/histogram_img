let img;
let processedImg;

function preload() {
  img = loadImage("https://raw.githubusercontent.com/joincheol/histogram_img/main/test_img2.jpg");
}

function setup() {
  createCanvas(1200, 800);

  // 이미지 복제
  processedImg = img.get();
  processedImg.loadPixels(); // 이미지의 픽셀 데이터를 사용

  // 이미지를 흑백으로 변환
  for (let x = 0; x < processedImg.width; x++) {
    for (let y = 0; y < processedImg.height; y++) {
      let index = (x + y * processedImg.width) * 4;
      let r = processedImg.pixels[index];
      let g = processedImg.pixels[index + 1];
      let b = processedImg.pixels[index + 2];
      let gray = (r + g + b) / 3;

      processedImg.pixels[index] = gray;
      processedImg.pixels[index + 1] = gray;
      processedImg.pixels[index + 2] = gray;
    }
  }

  // 흑백으로 변환된 이미지를 히스토그램을 평활화
  let histogram = calculateHistogram(processedImg);
  let equalizedImg = equalizeImage(processedImg, histogram);

  // 히스토그램 평활화된 이미지 표현
  image(equalizedImg, 0, 0, width / 3, height / 3);

  // 히스토그램 그리기
  drawHistogram(histogram, (width /3), 0, width / 3, height / 3);
}

function draw() {
}

// 이미지의 히스토그램을 계산
function calculateHistogram(inputImage) {
  let histogram = [];

  for (let i = 0; i <= 255; i++) {
    histogram[i] = 0;
  }

  for (let x = 0; x < inputImage.width; x++) {
    for (let y = 0; y < inputImage.height; y++) {
      let index = (x + y * inputImage.width) * 4;
      let gray = inputImage.pixels[index];
      histogram[gray]++;
    }
  }

  return histogram;
}

// 이미지 히스토그램 평활화
function equalizeImage(inputImage, histogram) {
  let cumulativeDistribution = [];
  let totalPixels = inputImage.width * inputImage.height;
  let equalizedImage = createImage(inputImage.width, inputImage.height);

  cumulativeDistribution[0] = histogram[0] / totalPixels;
  for (let i = 1; i <= 255; i++) {
    cumulativeDistribution[i] = cumulativeDistribution[i - 1] + histogram[i] / totalPixels;
  }

  equalizedImage.loadPixels();
  for (let x = 0; x < inputImage.width; x++) {
    for (let y = 0; y < inputImage.height; y++) {
      let index = (x + y * inputImage.width) * 4;
      let grayValue = inputImage.pixels[index];
      let equalizedValue = floor(cumulativeDistribution[grayValue] * 255);
      equalizedImage.pixels[index] = equalizedValue;
      equalizedImage.pixels[index + 1] = equalizedValue;
      equalizedImage.pixels[index + 2] = equalizedValue;
      equalizedImage.pixels[index + 3] = 255;
    }
  }
  equalizedImage.updatePixels();

  return equalizedImage;
}

// 히스토그램 그리기
function drawHistogram(histogram, x, y, w, h) {
  let maxCount = max(histogram);
  stroke(0);
  fill(150);
  for (let i = 0; i < histogram.length; i++) {
    // 각 밝기 값에 해당하는 히스토그램 막대 그리기
    let x1 = map(i, 0, 255, x, x + w);
    let y1 = map(histogram[i], 0, maxCount, y + h, y);
    let barWidth = w / 256;
    rect(x1, y1, barWidth, h - y1);
  }
}
